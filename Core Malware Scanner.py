import os
import hashlib
import requests
from tkinter import filedialog, Tk
from colorama import Fore, Style

def calculate_sha256(file_path):
    """
    Calculate the SHA-256 hash of a file.
    """
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_malware_hash(sha256_hash):
    """
    Check if a SHA-256 hash is present in VirusTotal's database of known malware hashes.
    """
    api_key = "your-api-key"
    url = f"https://www.virustotal.com/api/v3/files/{sha256_hash}"
    headers = {
        "x-apikey": api_key,
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        result = response.json()
        if "data" in result and "attributes" in result["data"]:
            attributes = result["data"]["attributes"]
            if "last_analysis_stats" in attributes:
                detection_stats = attributes["last_analysis_stats"]
                if "malicious" in detection_stats and detection_stats["malicious"] > 0:
                    return True
    return False

def scan_directory(directory):
    infected_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            print(f"Scanning file: {file_path}")  # Debugging output
            try:
                sha256_hash = calculate_sha256(file_path)
                print("SHA-256 hash:", sha256_hash)
                is_malware = check_malware_hash(sha256_hash)
                if is_malware:
                    print(f"The file {file_path} is identified as malware.")
                    infected_files.append(file_path)
                else:
                    print(f"The file {file_path} is not identified as malware.")
            except PermissionError:
                print(f"Permission denied to access file: {file_path}")
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")
    return infected_files

def select_dir():
    root = Tk()
    root.withdraw()
    directory = filedialog.askdirectory()
    root.destroy()
    return directory

def main():
    welcome_dragon4 = r"""
                      / \__
                    (    @\____
                     /         O
                   /   (_____ /
                /_____/   U

                    WELCOME
"""
    print(welcome_dragon4)
    print("Choose Directory For Scanning...")

    scan_directory_path = select_dir() # PATH FUNCTION TO SCAN DIRECTORY

    if not scan_directory_path:
        print("Please Select directory first ")
        return
    
    if not os.path.isdir(scan_directory_path):
        print(f"The specified scan directory does not exist: {scan_directory_path}")
        return

    infected_files = scan_directory(scan_directory_path)

    if infected_files:
        print("Infected files found:") 
        
        with open('Malware_Report.txt', 'a') as File:
            for file in infected_files:
                File.write(file + '\n')
                print(file)
    else:
        print("No infected files found.")
     
    if os.path.exists('Malware_Report.txt'):
        print("Malware Report.txt Generated")



if __name__ == "__main__":
    main()
    byebye = r"""
 
| __ ) _   _  ___  | __ ) _   _  ___| |
|  _ \| | | |/ _ \ |  _ \| | | |/ _ \ |
| |_) | |_| |  __/ | |_) | |_| |  __/_|
|____/ \__, |\___| |____/ \__, |\___(_)
       |___/              |___/        
    """
    print(byebye)
    input("Press Enter to exit...")
